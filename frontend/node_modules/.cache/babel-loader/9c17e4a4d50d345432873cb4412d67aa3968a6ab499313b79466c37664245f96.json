{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for debugging\napi.interceptors.request.use(config => {\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Job API functions\nexport const jobsAPI = {\n  // Get all jobs with optional filters\n  getJobs: async (filters = {}) => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.search) params.append('search', filters.search);\n      if (filters.job_type) params.append('job_type', filters.job_type);\n      if (filters.location) params.append('location', filters.location);\n      if (filters.tag) params.append('tag', filters.tag);\n      if (filters.sort) params.append('sort', filters.sort);\n      const response = await api.get(`/jobs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch jobs');\n    }\n  },\n  // Get single job by ID\n  getJob: async id => {\n    try {\n      const response = await api.get(`/jobs/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch job');\n    }\n  },\n  // Create new job\n  createJob: async jobData => {\n    try {\n      const response = await api.post('/jobs', jobData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to create job');\n    }\n  },\n  // Update existing job\n  updateJob: async (id, jobData) => {\n    try {\n      const response = await api.put(`/jobs/${id}`, jobData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to update job');\n    }\n  },\n  // Delete job\n  deleteJob: async id => {\n    try {\n      const response = await api.delete(`/jobs/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to delete job');\n    }\n  },\n  // Get unique job types for dropdown\n  getJobTypes: async () => {\n    try {\n      const response = await api.get('/jobs/job-types');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch job types');\n    }\n  },\n  // Get unique locations for dropdown\n  getLocations: async () => {\n    try {\n      const response = await api.get('/jobs/locations');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch locations');\n    }\n  },\n  // Get all tags\n  getTags: async () => {\n    try {\n      const response = await api.get('/jobs/tags');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch tags');\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('API health check failed');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","console","log","method","toUpperCase","url","data","error","Promise","reject","response","_error$response","message","jobsAPI","getJobs","filters","params","URLSearchParams","search","append","job_type","location","tag","sort","get","toString","_error$response2","_error$response2$data","Error","getJob","id","_error$response3","_error$response3$data","createJob","jobData","post","_error$response4","_error$response4$data","updateJob","put","_error$response5","_error$response5$data","deleteJob","delete","_error$response6","_error$response6$data","getJobTypes","getLocations","getTags","healthCheck"],"sources":["C:/Users/forcu/OneDrive/Desktop/Job Listing Web App/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for debugging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Job API functions\r\nexport const jobsAPI = {\r\n  // Get all jobs with optional filters\r\n  getJobs: async (filters = {}) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters.search) params.append('search', filters.search);\r\n      if (filters.job_type) params.append('job_type', filters.job_type);\r\n      if (filters.location) params.append('location', filters.location);\r\n      if (filters.tag) params.append('tag', filters.tag);\r\n      if (filters.sort) params.append('sort', filters.sort);\r\n      \r\n      const response = await api.get(`/jobs?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to fetch jobs');\r\n    }\r\n  },\r\n\r\n  // Get single job by ID\r\n  getJob: async (id) => {\r\n    try {\r\n      const response = await api.get(`/jobs/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to fetch job');\r\n    }\r\n  },\r\n\r\n  // Create new job\r\n  createJob: async (jobData) => {\r\n    try {\r\n      const response = await api.post('/jobs', jobData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to create job');\r\n    }\r\n  },\r\n\r\n  // Update existing job\r\n  updateJob: async (id, jobData) => {\r\n    try {\r\n      const response = await api.put(`/jobs/${id}`, jobData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to update job');\r\n    }\r\n  },\r\n\r\n  // Delete job\r\n  deleteJob: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/jobs/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to delete job');\r\n    }\r\n  },\r\n\r\n  // Get unique job types for dropdown\r\n  getJobTypes: async () => {\r\n    try {\r\n      const response = await api.get('/jobs/job-types');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch job types');\r\n    }\r\n  },\r\n\r\n  // Get unique locations for dropdown\r\n  getLocations: async () => {\r\n    try {\r\n      const response = await api.get('/jobs/locations');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch locations');\r\n    }\r\n  },\r\n\r\n  // Get all tags\r\n  getTags: async () => {\r\n    try {\r\n      const response = await api.get('/jobs/tags');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch tags');\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('API health check failed');\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}